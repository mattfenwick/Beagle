
(define test-ok
  (lambda (form message)
   (if form
       "ok"
       message)))

(define test-not-ok
  (lambda (form message)
   (if form
       message
       "ok")))


(define not
  (lambda (x)
   (if x false true)))

(define not-test
  (lambda ()
   (test-ok
    (and (equals? (not false)
            true)
         (equals? (not true)
            false)))))


(define and
  (lambda (x y)
    (if x y x)))

(define and-test
  (lambda ()
   (test-ok
    (all (list (and true true)
               (not (and true false))
               (not (and false true))
               (not (and false false))))
    "and-tests")))


(define or 
  (lambda (x y)
    (if x x y)))
       
(define or-test
  (lambda ()
   (test-ok
    (all (list (or true true)
               (or true false)
               (or false true)
               (not (and false false))))
    "or-tests")))


(define compose
  (lambda (f g)
   (lambda (x)
    (f (g x)))))

(define compose-list 
  (lambda (fs) 
   (reduce compose id fs)))


(define map
  (lambda (f xs)
    (if (null? xs)
        (list)
        (cons (f (car xs))
              (map f (cdr xs))))))

(define map-test
  (lambda ()
   (test-ok
    (all 
     (list (eq? (map id (list)) (list))
           (eq? (map id (list 1 2 3)) (list 1 2 3))
           (eq? (map (lambda (x) (cons 4 x))
                   (list (list 1) (list) (list 3 4)))
              (list (list 4 1) (list 4) (list 4 3 4)))))
    "map-tests")))


(define filter
  (lambda (f xs)
    (if (null? xs)
        (list)
        (if (f (car xs))
            (cons (car xs) (filter f (cdr xs)))
            (filter f (cdr xs))))))


(define id 
  (lambda (x) x))


(define reduce
  (lambda (f b xs)
    (if (null? xs)
        b
        (reduce f 
                (f b (car xs)) 
                (cdr xs)))))
                

(define any 
  (lambda (vals) 
	(reduce or false vals)))


(define all 
  (lambda (vals) 
	(reduce and true vals)))


(define zip
  (lambda (l1 l2)
    (if (or (null? l1) 
            (null? l2)) 
        (list) 
        (cons (cons (car l1)
                    (cons (car l2) (list)))
              (zip (cdr l1)
                   (cdr l2))))))


(define zip-map
  (lambda (f l1 l2)
    (map (lambda (p)
           (f (car p) (car (cdr p))))
         (zip l1 l2))))
       
       
(define count
  (lambda (l)
   (reduce 
    (lambda (b n) (+ b 1))
    0 
    l)))


(define flip
  (lambda (f)
   (lambda (a b)
    (f b a))))
    
    
(define reverse
  (lambda (ls)
   (reduce (flip cons) (quote ()) ls)))


(define ++
  (lambda (l1 l2)
   (reduce (flip cons) l2 (reverse l1))))


(define join-lists
  (lambda (x y)
   (reduce ++ (quote ())
           (map (lambda (e)
                 (map (lambda (f) (cons e f)) y)) 
                x))))
                
                
(define join-many-lists
  (lambda (ls)
   (reduce (flip join-lists) (list (list)) ls)))
   
