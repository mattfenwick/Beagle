(define apply1
  (special (f args)
   (eval (cons f args))))


; tried this earlier,
;   but fails on (apply reduce (list + 0 (list 1 2 3)))
;   because it tries to evaluate (list 1 2 3) twice
(define apply2
  (lambda (f args)
   (eval (cons f args))))


; works
(define apply3
  (special (f args)
   (eval (cons f (eval args)))))


; works
(define apply4
  (lambda (f args)
   (eval (cons (quote f) args))))