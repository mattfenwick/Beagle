
;; depends on 'simple-table'
;; depends on 'equal?'

(define eq-funcs
  ((lambda ()
   
   (define method-table (st-new (list)))
   
   (define add-method
     (lambda (fname types f)
      (set! method-table 
            (if (not (st-has? method-table fname))
                (st-add method-table 
                        fname
                        (st-add (st-new (list)) types f))
                (st-set method-table 
                        fname
                        (st-add (st-get method-table fname) types f))))))
      
   (define get-method
     (lambda (fname types)
      (st-get (st-get method-table fname) types)))
      
   (define has-method?
     (lambda (fname types)
      (st-has? (st-get method-table fname) types)))

   (add-method "=" "string" equal?)
      
   (add-method "=" "number" equal?)

   (add-method "=" "boolean" equal?)
   
   (add-method "=" "symbol" equal?)
   
   
   ;; 'type' needs to also be a generic function,
   ;;   so that this can work on user-defined types
   ;;   as well as the built-in ones
   ;; suggestion:  change name to 'prim-type' for built-in types
   (define =
     (lambda (l r)
      (if (not (equal? (type l) (type r)))
          false
          (if (has-method? "=" (type l))
              ((get-method "=" (type l)) l r)
              (=-error "no method found for this function and type")))))
   
   ;; wrong -- needs to use '=', not 'equal?' inside of 'eqlist?'
   ;;   anyway, 'eqlist?' is in a different module now, 
   ;;   so this code FAILS
   ;(add-method "=" "list" eqlist?)
   
   (add-method "<" "number" number-<)
   
   (add-method "<" "boolean" 
     (lambda (l r)
      (if r
          (not l)
          false)))
          
   
   (define <
     (lambda (l r)
      (if (not (equal? (type l) (type r)))
          (<-error "really need to figure this out")
          (if (has-method? "<" (type l))
              ((get-method "<" (type l)) l r)
              (<-error "no method found")))))

    (list = <))))
   ;; this is the end of the 'module':
   ;;    1 ) to end the lambda,
   ;;    2 ) to execute it,
   ;;    3 ) for the 'define'



(define = (car eq-funcs))

(define < (car (cdr eq-funcs)))
       
       
(define <=
  (lambda (l r)
   (or (< l r)
       (= l r))))


(define >
  (lambda (l r)
   (not (<= l r))))
   
   
(define >=
  (lambda (l r)
   (not (< l r))))
   
   
(define !=
  (lambda (l r)
   (not (= l r))))
